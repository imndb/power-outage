/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ch.be.datahackdays2025.poweroutage.apispec.api;

import ch.be.datahackdays2025.poweroutage.apispec.model.StromausfallMeldung;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-04T22:42:01.740348700+01:00[Europe/Berlin]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "stromausfall", description = "the stromausfall API")
public interface StromausfallApi {

    default StromausfallApiDelegate getDelegate() {
        return new StromausfallApiDelegate() {};
    }

    /**
     * GET /stromausfall : Liste aller Stromausfälle abrufen
     * Gibt eine Liste aller aktuellen Stromausfälle zurück.
     *
     * @return Erfolgreiche Antwort (status code 200)
     *         or Serverfehler (status code 500)
     */
    @Operation(
        operationId = "getAllStromausflle",
        summary = "Liste aller Stromausfälle abrufen",
        description = "Gibt eine Liste aller aktuellen Stromausfälle zurück.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Erfolgreiche Antwort", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = StromausfallMeldung.class)))
            }),
            @ApiResponse(responseCode = "500", description = "Serverfehler")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stromausfall",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<StromausfallMeldung>> getAllStromausflle(
        
    ) {
        return getDelegate().getAllStromausflle();
    }


    /**
     * GET /stromausfall/{id} : Einzelnen Stromausfall abrufen
     * Gibt die Details eines bestimmten Stromausfalls anhand der ID zurück.
     *
     * @param id Die eindeutige ID des Stromausfalls (required)
     * @return Erfolgreiche Antwort (status code 200)
     *         or Stromausfall nicht gefunden (status code 404)
     *         or Serverfehler (status code 500)
     */
    @Operation(
        operationId = "getStromausfall",
        summary = "Einzelnen Stromausfall abrufen",
        description = "Gibt die Details eines bestimmten Stromausfalls anhand der ID zurück.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Erfolgreiche Antwort", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StromausfallMeldung.class))
            }),
            @ApiResponse(responseCode = "404", description = "Stromausfall nicht gefunden"),
            @ApiResponse(responseCode = "500", description = "Serverfehler")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/stromausfall/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StromausfallMeldung> getStromausfall(
        @Parameter(name = "id", description = "Die eindeutige ID des Stromausfalls", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return getDelegate().getStromausfall(id);
    }


    /**
     * POST /stromausfall : Meldung eines Stromausfalls
     * Netzbetreiber melden Stromausfälle mit relevanten Informationen.
     *
     * @param stromausfallMeldung  (required)
     * @return Erfolgreich gemeldet (status code 201)
     *         or Ungültige Anfrage (status code 400)
     *         or Serverfehler (status code 500)
     */
    @Operation(
        operationId = "meldenStromausfall",
        summary = "Meldung eines Stromausfalls",
        description = "Netzbetreiber melden Stromausfälle mit relevanten Informationen.",
        responses = {
            @ApiResponse(responseCode = "201", description = "Erfolgreich gemeldet"),
            @ApiResponse(responseCode = "400", description = "Ungültige Anfrage"),
            @ApiResponse(responseCode = "500", description = "Serverfehler")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/stromausfall",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> meldenStromausfall(
        @Parameter(name = "StromausfallMeldung", description = "", required = true) @Valid @RequestBody StromausfallMeldung stromausfallMeldung
    ) {
        return getDelegate().meldenStromausfall(stromausfallMeldung);
    }

}
